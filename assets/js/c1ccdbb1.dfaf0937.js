"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[1564],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),s=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),f=o,y=d["".concat(a,".").concat(f)]||d[f]||p[f]||c;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<c;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},44485:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(74034),o=n(79973),c=(n(67294),n(3905)),i=["components"],l={title:"nhctl sync"},a=void 0,s={unversionedId:"cli/cli-sync",id:"cli/cli-sync",isDocsHomePage:!1,title:"nhctl sync",description:"Sync files to remote Pod in Kubernetes",source:"@site/docs/cli/cli-sync.md",sourceDirName:"cli",slug:"/cli/cli-sync",permalink:"/docs/cli/cli-sync",editUrl:"https://github.com/nocalhost/nocalhost.github.io/tree/main/docs/cli/cli-sync.md",tags:[],version:"current",lastUpdatedBy:"Garry",lastUpdatedAt:1628880717,formattedLastUpdatedAt:"8/13/2021",frontMatter:{title:"nhctl sync"},sidebar:"docs",previous:{title:"nhctl sync-status",permalink:"/docs/cli/cli-sync-status"},next:{title:"nhctl uninstall",permalink:"/docs/cli/cli-uninstall"}},u=[{value:"Usage",id:"usage",children:[]},{value:"\u6807\u8bc6",id:"\u6807\u8bc6",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Sync files to remote Pod in Kubernetes"),(0,c.kt)("h2",{id:"usage"},"Usage"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"nhctl sync [NAME] [flags]\n")),(0,c.kt)("h2",{id:"\u6807\u8bc6"},"\u6807\u8bc6"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Flags:\n      --container string          container name of pod to sync\n  -t, --controller-type string    kind of k8s controller,such as deployment,statefulSet\n  -d, --deployment string         k8s deployment which your developing service exists\n  -b, --double                    if use double side sync\n  -h, --help                      help for sync\n  -i, --ignored-pattern strings   local ignored pattern\n      --overwrite                 override the remote changing according to the local sync folder while start up (default true)\n      --resume                    resume file sync\n      --stop                      stop file sync\n  -s, --synced-pattern strings    local synced pattern\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")))}d.isMDXComponent=!0}}]);